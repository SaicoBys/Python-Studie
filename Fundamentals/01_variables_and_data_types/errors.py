# ========================================
# Manejo de Errores en Python
# ========================================

"""
## üìå Descripci√≥n
El manejo de errores es una parte esencial de la programaci√≥n, ya que permite detectar y responder a situaciones inesperadas que ocurren durante la ejecuci√≥n del programa.

Python proporciona un mecanismo para capturar errores y evitar que el programa se detenga abruptamente. Estos errores pueden ser:
- **Errores de sintaxis** (`SyntaxError`)
- **Errores en tiempo de ejecuci√≥n** como `NameError`, `TypeError`, `ZeroDivisionError`, entre otros.
"""

# ========================================
# Ejemplo de SyntaxError
# ========================================

"""
Un `SyntaxError` ocurre cuando escribimos una instrucci√≥n que no cumple con las reglas del lenguaje.
"""

try:
    eval('x === x')  # Error de sintaxis: '===' no es un operador v√°lido en Python
except SyntaxError as e:
    print("SyntaxError:", e)

# ========================================
# Ejemplo de NameError
# ========================================

"""
Un `NameError` ocurre cuando intentamos usar una variable que no ha sido definida.
"""

# try:
#     print(variable_inexistente)  # Variable no definida
# except NameError as e:
#     print("NameError:", e)

# ========================================
# Ejemplo de ZeroDivisionError
# ========================================

"""
Un `ZeroDivisionError` ocurre cuando intentamos dividir un n√∫mero entre cero.
"""

try:
    resultado = 10 / 0  # Divisi√≥n entre cero
except ZeroDivisionError as e:
    print("ZeroDivisionError:", e)

# ========================================
# Resumen
# ========================================

"""
## ‚úÖ Resumen

- `SyntaxError`: Se produce cuando el c√≥digo no cumple con las reglas de sintaxis de Python.
- `NameError`: Se produce cuando se hace referencia a una variable que no ha sido definida.
- `ZeroDivisionError`: Se produce cuando se intenta dividir un n√∫mero entre cero.
- El uso de `try` y `except` permite capturar y manejar errores para evitar que el programa falle.
"""

# ========================================
# Ejercicios de Pr√°ctica
# ========================================

"""
## üß† Ejercicios de pr√°ctica

1Ô∏è‚É£ Crea un bloque `try/except` que capture un `TypeError`.

2Ô∏è‚É£ Intenta convertir un string no num√©rico a entero con `int("hola")` y maneja el `ValueError`.

3Ô∏è‚É£ Intenta acceder a un √≠ndice inv√°lido en una lista y maneja el `IndexError`.

4Ô∏è‚É£ Usa un `try/except` para capturar cualquier error gen√©rico y mostrar el mensaje "Ocurri√≥ un error".

‚úÖ Escribe tus soluciones debajo de cada enunciado:
"""

# --------------------------------------------------
# 1Ô∏è‚É£ TypeError
# --------------------------------------------------


# --------------------------------------------------
# 2Ô∏è‚É£ ValueError
# --------------------------------------------------


# --------------------------------------------------
# 3Ô∏è‚É£ IndexError
# --------------------------------------------------


# --------------------------------------------------
# 4Ô∏è‚É£ Manejo gen√©rico de errores
# --------------------------------------------------


# ========================================
# Fin del Documento
# ========================================