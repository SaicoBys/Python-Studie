# ========================================
# Flujo de Control en Python
# ========================================

"""
## üìå Descripci√≥n
El flujo de control en Python permite ejecutar diferentes bloques de c√≥digo seg√∫n condiciones espec√≠ficas.
Se divide en las siguientes estructuras:

1. **Condicionales (`if`, `elif`, `else`)**: Ejecutan c√≥digo dependiendo de una condici√≥n.
2. **Operadores L√≥gicos (`and`, `or`, `not`)**: Permiten combinar condiciones en expresiones condicionales.
3. **Estructuras de decisi√≥n `match-case`**: Alternativa a `if-elif-else` (Python 3.10+).
4. **Control de flujo en bucles (`break`, `continue`, `else`)**: Manejan la ejecuci√≥n dentro de los bucles.
"""

# ========================================
# 1. Condicionales (if, elif, else)
# ========================================

"""
Las sentencias `if`, `elif` y `else` permiten ejecutar c√≥digo basado en condiciones.

üìå **Sintaxis b√°sica:**
if condici√≥n:
    # C√≥digo a ejecutar si la condici√≥n es verdadera
elif otra_condici√≥n:
    # C√≥digo si la primera condici√≥n es falsa y esta es verdadera
else:
    # C√≥digo si ninguna condici√≥n anterior se cumple
"""

# Ejemplo interactivo con entrada del usuario
edad = int(input("Ingrese su edad: "))

if edad >= 18:
    print("Eres mayor de edad.")
elif edad >= 13:
    print("Eres un adolescente.")
else:
    print("Eres un ni√±o.")

# ========================================
# 2. Operadores L√≥gicos en Condiciones
# ========================================

"""
Los operadores l√≥gicos (`and`, `or`, `not`) permiten evaluar m√∫ltiples condiciones:
- `and`: Devuelve `True` si ambas condiciones son verdaderas.
- `or`: Devuelve `True` si al menos una condici√≥n es verdadera.
- `not`: Invierte el resultado de una condici√≥n.
"""

# Ejemplo con operadores l√≥gicos
ingresos = 5000
credito_bueno = True

if ingresos > 3000 and credito_bueno:
    print("Aprobado para el pr√©stamo.")
else:
    print("No cumples con los requisitos.")

# ========================================
# 3. Uso de match-case (Python 3.10+)
# ========================================

"""
`match-case` es una alternativa m√°s clara al `if-elif-else` cuando se tienen m√∫ltiples casos.

üìå **Sintaxis:**
match variable:
    case valor1:
        # C√≥digo a ejecutar
    case valor2:
        # Otro bloque de c√≥digo
    case _:
        # Caso por defecto (similar a else)
"""

# Ejemplo con match-case
opcion = int(input("Seleccione una opci√≥n (1, 2 o 3): "))

match opcion:
    case 1:
        print("Seleccionaste la opci√≥n 1.")
    case 2:
        print("Seleccionaste la opci√≥n 2.")
    case _:
        print("Opci√≥n no v√°lida.")  # `case _:` act√∫a como `else` en `if-elif-else`.

# ========================================
# 4. Control de Flujo en Bucles
# ========================================

"""
Se pueden utilizar `break`, `continue` y `else` dentro de bucles para modificar el flujo de ejecuci√≥n:
- `break`: Detiene completamente el bucle.
- `continue`: Salta a la siguiente iteraci√≥n sin ejecutar el resto del c√≥digo en la actual.
- `else`: Se ejecuta solo si el bucle termina sin interrupciones por `break`.
"""

# Ejemplo con break y continue
for numero in range(1, 6):
    if numero == 3:
        continue  # Salta el n√∫mero 3
    print(numero)

# Ejemplo con else en for-loop
for i in range(5):
    print(i)
else:
    print("Bucle terminado sin interrupciones.")

# Ejemplo con else en while-loop
contador = 0
while contador < 3:
    print(f"Intento {contador + 1}")
    contador += 1
else:
    print("El bucle termin√≥ sin interrupciones.")

# ========================================
# Resumen
# ========================================

"""
## üìå Resumen
- `if-elif-else` se usa para decisiones condicionales.
- Los operadores `and`, `or`, `not` permiten evaluar m√∫ltiples condiciones.
- `match-case` es √∫til para evaluar m√∫ltiples casos de una variable (Python 3.10+).
- `break` y `continue` modifican el comportamiento de los bucles.
- `else` en bucles se ejecuta solo si el bucle no se interrumpe con `break`.
"""

# ========================================
# Ejercicios de Pr√°ctica
# ========================================

"""
## üß† Ejercicios de pr√°ctica para if / elif / else

1Ô∏è‚É£ Clasifica una temperatura:
   - Si es mayor o igual a 30¬∞C, imprime "Hace calor".
   - Si est√° entre 20¬∞C y 29¬∞C, imprime "Est√° templado".
   - Si es menor de 20¬∞C, imprime "Hace fr√≠o".

2Ô∏è‚É£ Clasifica un n√∫mero ingresado por el usuario:
   - Imprime "Positivo" si el n√∫mero es mayor a 0.
   - Imprime "Negativo" si es menor a 0.
   - Imprime "Cero" si es igual a 0.

3Ô∏è‚É£ Eval√∫a una nota del 0 al 100:
   - "Excelente" si es 90 o m√°s.
   - "Bien" si est√° entre 70 y 89.
   - "Suficiente" si est√° entre 60 y 69.
   - "Insuficiente" si es menor de 60.

4Ô∏è‚É£ Pregunta al usuario si tiene membres√≠a (s√≠/no) y cu√°nto gast√≥:
   - Si tiene membres√≠a y gast√≥ m√°s de 100, imprime "Descuento aplicado".
   - Si tiene membres√≠a pero gast√≥ 100 o menos, imprime "Compra m√≠nima no alcanzada".
   - Si no tiene membres√≠a, imprime "No aplica descuento".

5Ô∏è‚É£ Selecci√≥n de fruta:
   - Pide al usuario que escriba una fruta (manzana, banana, naranja).
   - Usa `match-case` para imprimir un mensaje distinto por fruta.
   - Si no es ninguna de esas, imprime "Fruta no reconocida".

6Ô∏è‚É£ Validaci√≥n con `not`:
   - Declara una variable `llueve = False`.
   - Usa `not` para imprimir "Puedes salir sin paraguas" si no est√° lloviendo.

‚úÖ Prueba a resolver cada uno con lo aprendido sobre condicionales.
"""

# --------------------------------------------------
# 1Ô∏è‚É£ Clasifica una temperatura
# --------------------------------------------------

def temp(c):
    if c >= 30:
        return "Hace calor."
    elif c >= 20:
        return "Est√° templado."
    else:
        return "Hace fr√≠o."

# --------------------------------------------------
# 2Ô∏è‚É£ Clasifica un n√∫mero como positivo, negativo o cero
# --------------------------------------------------

def nums(num):
    if num > 0:
        return f"El numero {num} es positivo."
    elif num < 0 :
        return f"El numero {num} es negativo."
    else:
        return f"El numero {num} es cero."

# --------------------------------------------------
# 3Ô∏è‚É£ Eval√∫a una nota de 0 a 100
# --------------------------------------------------

def grades(grade):
    if grade >= 90:
        return f"La nota es de {grade}, lo cual es 'excelente'."
    elif grade >= 70:
        return f"La nota es de {grade}, lo cual es 'bien'."
    elif grade >= 60:
        return f"La nota es de {grade}, lo cual es 'suficiente'."
    else:
        return f"La nota es de {grade}, lo cual es 'insuficiente'."

# --------------------------------------------------
# 4Ô∏è‚É£ Verifica membres√≠a y gasto
# --------------------------------------------------

membresia = True
check = 120

if membresia == True and check > 100:
    print("Descuento aplicado")
elif membresia == True and check <= 100:
    print("Compra minima no alcanzada")
else:
    print("No aplica descuento")

# --------------------------------------------------
# 5Ô∏è‚É£ Usa `match-case` para seleccionar una fruta
# --------------------------------------------------

fruta = input("Seleccione una fruta: Manzana, Pera o Sandia: ")

match fruta:
    case 1:
        print("Comeras Manzana")
    case 2:
        print("Comeras Pera")
    case _:
        print("Comeras Sandia")


# --------------------------------------------------
# 6Ô∏è‚É£ Usa `not` para validar una condici√≥n
# --------------------------------------------------

llueve = False
if not llueve:
    print("Puedes salir sin paraguas.")

# ========================================
# Fin del Documento
# ========================================