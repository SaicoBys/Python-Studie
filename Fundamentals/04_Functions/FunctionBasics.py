# ========================================
# Conceptos B치sicos de Funciones en Python
# ========================================

"""
## 游늷 Descripci칩n
Las funciones en Python permiten encapsular bloques de c칩digo para su reutilizaci칩n y organizaci칩n.
Son fundamentales para estructurar programas de manera modular y eficiente.

### 游늷 Beneficios de usar funciones:
- **Reutilizaci칩n del c칩digo**: Evita duplicaci칩n y facilita mantenimiento.
- **Modularidad**: Se puede dividir el c칩digo en partes m치s manejables.
- **Facilitan la depuraci칩n**: Es m치s f치cil probar funciones individuales.
"""

# ========================================
# 1. Definici칩n de una Funci칩n
# ========================================

"""
Las funciones se definen usando `def` seguido del nombre de la funci칩n y par칠ntesis.

游늷 **Sintaxis**:
def nombre_funcion():
    # C칩digo dentro de la funci칩n
"""

# Ejemplo b치sico de funci칩n
def saludar():
    """Imprime un mensaje de bienvenida."""
    print("춰Hola, bienvenido a Python!")

saludar()  # Llamada a la funci칩n

# ========================================
# 2. Par치metros en Funciones
# ========================================

"""
Las funciones pueden aceptar par치metros para recibir valores al ser llamadas.

游늷 **Tipos de par치metros:**
1. **Par치metros obligatorios**: Se deben proporcionar al llamar la funci칩n.
2. **Par치metros con valores por defecto**: Se usan si no se proporciona un valor.
"""

# Ejemplo de par치metros
def informacion(nombre, edad=18):
    """Muestra informaci칩n de una persona."""
    print(f"Nombre: {nombre}, Edad: {edad}")

informacion("Carlos", 25)  # Par치metros expl칤citos
informacion("Ana")  # Usa el valor por defecto de `edad`

# ========================================
# 3. Valores de Retorno
# ========================================

"""
Las funciones pueden devolver valores usando `return`. Esto permite capturar y utilizar los resultados.
"""

# Retorno de un solo valor
def cuadrado(num):
    """Devuelve el cuadrado de un n칰mero."""
    return num ** 2

print(cuadrado(4))  # 16

# Retorno de m칰ltiples valores
def operaciones(a, b):
    """Devuelve la suma y la resta de dos n칰meros."""
    suma = a + b
    resta = a - b
    return suma, resta

resultado_suma, resultado_resta = operaciones(10, 5)
print(f"Suma: {resultado_suma}, Resta: {resultado_resta}")

# ========================================
# 4. Par치metros con Valores por Defecto
# ========================================

"""
Podemos asignar valores por defecto a los par치metros. Si no se proporciona un valor al llamar la funci칩n,
se usar치 el valor por defecto.
"""

def presentar(nombre="Usuario", edad=18):
    """Muestra un mensaje con nombre y edad con valores por defecto."""
    print(f"Nombre: {nombre}, Edad: {edad}")

presentar("Carlos", 25)
presentar()  # Usa los valores por defecto

# ========================================
# 5. Argumentos Variables: *args y **kwargs
# ========================================

"""
- `*args` permite pasar m칰ltiples valores como una tupla.
- `**kwargs` permite pasar m칰ltiples pares clave-valor como un diccionario.
"""

# Uso de *args
def sumar_todo(*numeros):
    """Suma todos los n칰meros proporcionados."""
    return sum(numeros)

print(sumar_todo(1, 2, 3, 4, 5))  # 15

# Uso de **kwargs
def mostrar_info(**datos):
    """Muestra informaci칩n proporcionada como clave-valor."""
    for clave, valor in datos.items():
        print(f"{clave}: {valor}")

mostrar_info(nombre="Ana", edad=22, ciudad="Madrid")

# ========================================
# Resumen
# ========================================

"""
游늷 **Resumen de Funciones en Python**:
- Se usa `def` para definir funciones.
- Las funciones pueden aceptar **par치metros** y devolver valores con `return`.
- `*args` permite pasar m칰ltiples valores como tupla.
- `**kwargs` permite pasar m칰ltiples valores como pares clave-valor.
- Se pueden definir **valores por defecto** en los par치metros de una funci칩n.
- Las funciones pueden devolver **uno o m칰ltiples valores**.
"""

# ========================================
# Fin del Documento
# ========================================
