# ========================================
# Funciones en Python - Indentaci√≥n
# ========================================

"""
## üìå Descripci√≥n
La indentaci√≥n en Python es **obligatoria** y define la estructura del c√≥digo.
A diferencia de otros lenguajes que usan llaves `{}` o `begin-end`, en Python la indentaci√≥n determina los bloques de c√≥digo.

üìå **Importancia de la indentaci√≥n**:
- **Define la estructura del c√≥digo**: Python usa espacios en blanco en lugar de llaves `{}`.
- **Evita errores de sintaxis**: La indentaci√≥n incorrecta provoca `IndentationError`.
- **Mejora la legibilidad**: Un c√≥digo bien indentado es m√°s f√°cil de entender y mantener.
"""

# ========================================
# 1. Ejemplo de Indentaci√≥n Correcta
# ========================================

def sample_function():
    """
    Funci√≥n que demuestra la importancia de la indentaci√≥n correcta.
    """
    message = "dentro de la funci√≥n"  # Se asigna un mensaje a la variable
    print(f"Este mensaje est√° {message}.")  # Se imprime el mensaje

# Invocaci√≥n de la funci√≥n:
sample_function()  # Llama a la funci√≥n para ejecutar su contenido
# Salida: Este mensaje est√° dentro de la funci√≥n.

# ========================================
# 2. Consecuencias de Indentaci√≥n Incorrecta
# ========================================

"""
Una indentaci√≥n incorrecta puede generar errores de sintaxis.
"""

# ‚ùå Ejemplo de Error de Indentaci√≥n (provocar√° un `IndentationError` si se ejecuta)
def broken_function():
    print("Este c√≥digo est√° mal indentado")  # No tiene indentaci√≥n

# ========================================
# 3. Indentaci√≥n en Estructuras de Control
# ========================================

"""
La indentaci√≥n tambi√©n define el alcance de estructuras de control (`if`, `for`, `while`).
"""

# Ejemplo con estructura if-else:
def verificar_numero(n):
    """
    Funci√≥n que verifica si un n√∫mero es positivo, negativo o cero.
    """
    if n > 0:  # Verifica si el n√∫mero es mayor que cero
        print(f"{n} es un n√∫mero positivo.")  # Imprime que es positivo
    elif n < 0:  # Verifica si el n√∫mero es menor que cero
        print(f"{n} es un n√∫mero negativo.")  # Imprime que es negativo
    else:  # Si no es ni mayor ni menor que cero, debe ser cero
        print(f"{n} es cero.")  # Imprime que es cero

# Prueba de la funci√≥n:
verificar_numero(5)  # Llama a la funci√≥n con 5
verificar_numero(-3) # Llama a la funci√≥n con -3
verificar_numero(0)  # Llama a la funci√≥n con 0

# ========================================
# 4. Indentaci√≥n en Bucles
# ========================================

"""
Los bucles en Python requieren indentaci√≥n para definir su contenido.
"""

# Ejemplo con un bucle for:
def count_to_five():
    """
    Funci√≥n que cuenta hasta cinco, demostrando la indentaci√≥n en un bucle.
    """
    for i in range(1, 6):  # Itera desde 1 hasta 5
        print(i)  # Imprime el n√∫mero actual

# Invocaci√≥n de la funci√≥n:
count_to_five()  # Llama a la funci√≥n para contar hasta cinco
# Salida:
# 1
# 2
# 3
# 4
# 5

# ========================================
# Ejercicios de Pr√°ctica
# ========================================

"""
## üß† Ejercicios de pr√°ctica sobre indentaci√≥n

1Ô∏è‚É£ Crea una funci√≥n llamada `saludo` que imprima "Hola Mundo".

2Ô∏è‚É£ Dentro de un bucle `for`, imprime los n√∫meros del 1 al 5 usando indentaci√≥n adecuada.

3Ô∏è‚É£ Crea una funci√≥n que reciba un n√∫mero y devuelva si es par o impar, usando estructuras condicionales correctamente indentadas.

4Ô∏è‚É£ Intenta escribir una funci√≥n con mala indentaci√≥n y ejecuta el c√≥digo para ver qu√© error aparece.
"""

# Espacio para practicar:

# ========================================
# Fin del Documento
# ========================================