# ========================================
# Funciones en Python - Par√°metros y Argumentos
# ========================================

"""
## Descripci√≥n
Las funciones utilizan **par√°metros** para recibir datos como argumentos, permitiendo que sean flexibles y adaptables a diferentes situaciones.

### Diferencia entre Par√°metros y Argumentos
- **Par√°metros**: Variables definidas en la declaraci√≥n de la funci√≥n.
- **Argumentos**: Valores que se pasan a la funci√≥n cuando se llama.

Python permite varios tipos de par√°metros:
1. **Par√°metros Posicionales** (obligatorios en orden espec√≠fico).
2. **Par√°metros con Palabras Clave (`keyword arguments`)**.
3. **Par√°metros con Valores por Defecto**.
4. **Argumentos Variables (`*args`, `**kwargs`)**.
"""

# ========================================
# 1. Par√°metros Posicionales
# ========================================

"""
Los par√°metros posicionales deben proporcionarse en el orden en que est√°n definidos en la funci√≥n.
"""

def print_name(name):
    """Funci√≥n que recibe un nombre como par√°metro y lo imprime."""
    print(f"Nombre: {name}")

# Invocaci√≥n de la funci√≥n:
print_name('Alice')  # Salida: Nombre: Alice

# ========================================
# 2. M√∫ltiples Par√°metros
# ========================================

def describe_pet(animal, name):
    """Funci√≥n que describe un animal proporcionando su tipo y nombre."""
    print(f"Yo tengo un {animal} llamado {name}.")

describe_pet('perro', 'Rex')  # Salida: Yo tengo un perro llamado Rex.

def calcular_area(base, altura):
    """Calcula el √°rea de un tri√°ngulo."""
    return (base * altura) / 2

print(calcular_area(10, 5))  # Salida: 25.0

# ========================================
# 3. Par√°metros con Palabras Clave (Keyword Arguments)
# ========================================

"""
En lugar de depender del orden, se pueden especificar los argumentos por su nombre.
Esto mejora la legibilidad y flexibilidad.
"""

def crear_usuario(nombre, edad, ciudad):
    print(f"Nombre: {nombre}, Edad: {edad}, Ciudad: {ciudad}")

crear_usuario(edad=30, nombre="Juan", ciudad="Madrid")  # Orden flexible

# ========================================
# 4. Par√°metros con Valores por Defecto
# ========================================

def describe_city(city, country='Italia'):
    """Funci√≥n que describe una ciudad y su pa√≠s, con un valor por defecto para el pa√≠s."""
    print(f"{city} est√° en {country}.")

describe_city('Roma')  # Usa el valor por defecto

describe_city('Madrid', 'Espa√±a')  # Sobreescribe el valor por defecto

# ========================================
# 5. Argumentos Variables (*args y **kwargs)
# ========================================

"""
- `*args`: Permite pasar un n√∫mero variable de argumentos posicionales.
- `**kwargs`: Permite pasar un n√∫mero variable de argumentos con nombre.
"""

def sumar(*numeros):
    """Suma cualquier cantidad de n√∫meros."""
    return sum(numeros)

print(sumar(1, 2, 3, 4, 5))  # 15

def mostrar_info(**datos):
    """Muestra informaci√≥n de un usuario con argumentos clave-valor."""
    for clave, valor in datos.items():
        print(f"{clave}: {valor}")

mostrar_info(nombre="Ana", edad=22, ciudad="Madrid")

# ========================================
# Resumen
# ========================================

"""
- **Par√°metros Posicionales**: Se pasan en un orden espec√≠fico.
- **Keyword Arguments**: Se pueden pasar en cualquier orden especificando el nombre del par√°metro.
- **Par√°metros con Valores por Defecto**: Si no se proporciona un valor, usa el predeterminado.
- **`*args`** permite recibir m√∫ltiples valores posicionales.
- **`**kwargs`** permite recibir m√∫ltiples valores clave-valor.

Comprender el uso de par√°metros mejora la flexibilidad y reutilizaci√≥n de las funciones en Python.
"""

# ========================================
# üß† Ejercicios de Pr√°ctica
# ========================================

# ----------------------------------------
# 1Ô∏è‚É£ greet_user(name)
# ----------------------------------------

"""
Crea una funci√≥n `greet_user` que reciba un nombre y devuelva un saludo personalizado.
Ejemplo:
greet_user("Alice") -> "Hola, Alice!"
"""

# ----------------------------------------
# 2Ô∏è‚É£ calcular_precio_total(precio, cantidad)
# ----------------------------------------

"""
Crea una funci√≥n `calcular_precio_total` que reciba un precio y una cantidad, y retorne el total a pagar.
Ejemplo:
calcular_precio_total(10, 3) -> 30
"""

# ----------------------------------------
# 3Ô∏è‚É£ multiplicar_lista(*numeros)
# ----------------------------------------

"""
Crea una funci√≥n `multiplicar_lista` que reciba cualquier cantidad de n√∫meros usando *args y devuelva el resultado de multiplicarlos todos.
Ejemplo:
multiplicar_lista(2, 3, 4) -> 24
"""

# ----------------------------------------
# 4Ô∏è‚É£ mostrar_perfil(**datos)
# ----------------------------------------

"""
Crea una funci√≥n `mostrar_perfil` que reciba datos personales como nombre, edad y pa√≠s utilizando **kwargs, e imprima el perfil del usuario en formato:
"Nombre: ___, Edad: ___, Pa√≠s: ___"
"""

# ========================================
# Fin del Documento
# ========================================
