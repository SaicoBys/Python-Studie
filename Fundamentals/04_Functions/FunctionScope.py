# ========================================
# Funciones en Python - √Åmbito de Variables
# ========================================

"""
## Descripci√≥n
El √°mbito de una variable determina en qu√© partes del c√≥digo puede ser utilizada.
En Python, existen los siguientes tipos de √°mbito:

1. **√Åmbito Local**: Variables definidas dentro de una funci√≥n, solo accesibles dentro de ella.
2. **√Åmbito Global**: Variables definidas fuera de funciones, accesibles en todo el programa.
3. **Palabra Clave `global`**: Permite modificar variables globales dentro de una funci√≥n.
4. **Palabra Clave `nonlocal`**: Permite modificar variables en un √°mbito intermedio dentro de funciones anidadas.
"""

# ========================================
# 1. √Åmbito Local
# ========================================

"""
Las variables creadas dentro de una funci√≥n solo existen dentro de ella.
Intentar acceder a ellas fuera de la funci√≥n generar√° un error.
"""

def funcion_local():
    x = 10  # Variable local
    print(f"Valor de x dentro de la funci√≥n: {x}")

funcion_local()

# ‚ùå Intento de acceder a una variable local fuera de su funci√≥n (provocar√° un error)
# print(x)  # Esto generar√≠a un NameError porque x solo existe dentro de la funci√≥n

# ========================================
# 2. √Åmbito Global
# ========================================

"""
Las variables globales se definen fuera de cualquier funci√≥n y pueden ser accedidas desde cualquier parte del c√≥digo.
"""

y = 20  # Variable global

def funcion_global():
    print(f"Valor de y dentro de la funci√≥n: {y}")

funcion_global()
print(f"Valor de y fuera de la funci√≥n: {y}")

"""
‚ö† **Advertencia sobre Variables Globales**:
El uso excesivo de variables globales puede hacer que el c√≥digo sea m√°s dif√≠cil de depurar y mantener.
Siempre que sea posible, es mejor usar variables locales dentro de funciones.
"""

# ========================================
# 3. Uso de `global` para modificar variables globales dentro de funciones
# ========================================

"""
Si intentamos modificar una variable global dentro de una funci√≥n sin declararla como `global`, Python la tratar√° como una variable local.
"""

contador = 0  # Variable global

def incrementar_contador():
    global contador  # Declaramos que vamos a modificar la variable global
    contador += 1
    print(f"Contador dentro de la funci√≥n: {contador}")

incrementar_contador()
print(f"Contador fuera de la funci√≥n: {contador}")

"""
‚ö† **Advertencia sobre `global`**:
El uso de `global` puede generar efectos secundarios no deseados si varias funciones modifican la misma variable global.
Es recomendable evitarlo en programas grandes para mejorar la modularidad.
"""

# ========================================
# 4. Uso de `nonlocal` para modificar variables en funciones anidadas
# ========================================

"""
`nonlocal` permite modificar variables en un √°mbito intermedio dentro de una funci√≥n anidada.
"""

def funcion_externa():
    mensaje = "Hola"
    
    def funcion_interna():
        nonlocal mensaje  # Modifica la variable en el √°mbito intermedio
        mensaje = "Hola, modificado"
        print(f"Mensaje dentro de la funci√≥n interna: {mensaje}")
    
    funcion_interna()
    print(f"Mensaje dentro de la funci√≥n externa: {mensaje}")

funcion_externa()

"""
üìå **¬øCu√°ndo usar `nonlocal`?**
- √ötil cuando una funci√≥n interna necesita modificar una variable definida en la funci√≥n externa.
- No se puede usar `nonlocal` con variables globales, solo con variables en √°mbitos intermedios.
"""

# ========================================
# Resumen
# ========================================

"""
üìå **Resumen del √Åmbito de Variables en Python**:
- **Local**: Variables creadas dentro de una funci√≥n, solo accesibles ah√≠.
- **Global**: Variables accesibles en todo el c√≥digo.
- **global**: Permite modificar variables globales dentro de una funci√≥n, pero su uso debe ser limitado.
- **nonlocal**: Permite modificar variables en un √°mbito intermedio en funciones anidadas.

‚úî Comprender el √°mbito de las variables es clave para evitar errores y escribir c√≥digo limpio y estructurado.
"""

# ========================================
# Fin del Documento
# ========================================
