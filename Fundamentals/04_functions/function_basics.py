# ========================================
# Conceptos B√°sicos de Funciones en Python
# ========================================

"""
## üìå Descripci√≥n
Las funciones en Python permiten encapsular bloques de c√≥digo para su reutilizaci√≥n y organizaci√≥n.
Son fundamentales para estructurar programas de manera modular y eficiente.

### üìå Beneficios de usar funciones:
- **Reutilizaci√≥n del c√≥digo**: Evita duplicaci√≥n y facilita mantenimiento.
- **Modularidad**: Se puede dividir el c√≥digo en partes m√°s manejables.
- **Facilitan la depuraci√≥n**: Es m√°s f√°cil probar funciones individuales.
"""

# ========================================
# 1. Definici√≥n de una Funci√≥n
# ========================================

"""
Las funciones se definen usando `def` seguido del nombre de la funci√≥n y par√©ntesis.

üìå **Sintaxis**:
def nombre_funcion():
    # C√≥digo dentro de la funci√≥n
"""

# Ejemplo b√°sico de funci√≥n
def saludar():
    """Imprime un mensaje de bienvenida."""
    print("¬°Hola, bienvenido a Python!")  # Imprime el mensaje de saludo

saludar()  # Llamada a la funci√≥n que ejecuta el saludo

# ========================================
# 2. Par√°metros en Funciones
# ========================================

"""
Las funciones pueden aceptar par√°metros para recibir valores al ser llamadas.

üìå **Tipos de par√°metros:**
1. **Par√°metros obligatorios**: Se deben proporcionar al llamar la funci√≥n.
2. **Par√°metros con valores por defecto**: Se usan si no se proporciona un valor.
"""

# Ejemplo de par√°metros
def informacion(nombre, edad=18):
    """Muestra informaci√≥n de una persona."""
    print(f"Nombre: {nombre}, Edad: {edad}")  # Imprime el nombre y la edad

informacion("Carlos", 25)  # Par√°metros expl√≠citos: nombre y edad
informacion("Ana")  # Usa el valor por defecto de `edad`

# ========================================
# 3. Valores de Retorno
# ========================================

"""
Las funciones pueden devolver valores usando `return`. Esto permite capturar y utilizar los resultados.
"""

# Retorno de un solo valor
def cuadrado(num):
    """Devuelve el cuadrado de un n√∫mero."""
    return num ** 2  # Calcula el cuadrado del n√∫mero y lo devuelve

print(cuadrado(4))  # 16, llama a la funci√≥n y muestra el resultado

# Retorno de m√∫ltiples valores
def operaciones(a, b):
    """Devuelve la suma y la resta de dos n√∫meros."""
    suma = a + b  # Calcula la suma
    resta = a - b  # Calcula la resta
    return suma, resta  # Devuelve ambos resultados

resultado_suma, resultado_resta = operaciones(10, 5)  # Llama a la funci√≥n y captura los resultados
print(f"Suma: {resultado_suma}, Resta: {resultado_resta}")  # Imprime los resultados

# ========================================
# 4. Par√°metros con Valores por Defecto
# ========================================

"""
Podemos asignar valores por defecto a los par√°metros. Si no se proporciona un valor al llamar la funci√≥n,
se usar√° el valor por defecto.
"""

def presentar(nombre="Usuario", edad=18):
    """Muestra un mensaje con nombre y edad con valores por defecto."""
    print(f"Nombre: {nombre}, Edad: {edad}")  # Imprime el nombre y la edad

presentar("Carlos", 25)  # Llama a la funci√≥n con par√°metros espec√≠ficos
presentar()  # Usa los valores por defecto

# ========================================
# 5. Argumentos Variables: *args y **kwargs
# ========================================

"""
- `*args` permite pasar m√∫ltiples valores como una tupla.
- `**kwargs` permite pasar m√∫ltiples pares clave-valor como un diccionario.
"""

# Uso de *args
def sumar_todo(*numeros):
    """Suma todos los n√∫meros proporcionados."""
    return sum(numeros)  # Suma todos los n√∫meros en la tupla y devuelve el resultado

print(sumar_todo(1, 2, 3, 4, 5))  # 15, llama a la funci√≥n y muestra la suma

# Uso de **kwargs
def mostrar_info(**datos):
    """Muestra informaci√≥n proporcionada como clave-valor."""
    for clave, valor in datos.items():  # Itera sobre los pares clave-valor
        print(f"{clave}: {valor}")  # Imprime cada par clave-valor

mostrar_info(nombre="Ana", edad=22, ciudad="Madrid")  # Llama a la funci√≥n con datos

# ========================================
# Resumen
# ========================================

"""
üìå **Resumen de Funciones en Python**:
- Se usa `def` para definir funciones.
- Las funciones pueden aceptar **par√°metros** y devolver valores con `return`.
- `*args` permite pasar m√∫ltiples valores como tupla.
- `**kwargs` permite pasar m√∫ltiples valores como pares clave-valor.
- Se pueden definir **valores por defecto** en los par√°metros de una funci√≥n.
- Las funciones pueden devolver **uno o m√∫ltiples valores**.
"""

# ========================================
# Ejercicios de Pr√°ctica
# ========================================

"""
## üß† Ejercicios de pr√°ctica sobre funciones

1Ô∏è‚É£ Escribe una funci√≥n llamada `saludo_personalizado(nombre)` que imprima un saludo personalizado usando el nombre proporcionado.

2Ô∏è‚É£ Crea una funci√≥n `area_rectangulo(base, altura)` que calcule y retorne el √°rea de un rect√°ngulo.

3Ô∏è‚É£ Define una funci√≥n `multiplicar_lista(*numeros)` que use `*args` para multiplicar todos los n√∫meros pasados como argumento.

4Ô∏è‚É£ Crea una funci√≥n `mostrar_perfil(**datos)` que reciba cualquier cantidad de datos (nombre, edad, ciudad, etc.) y los imprima en formato clave: valor.

5Ô∏è‚É£ Crea una funci√≥n `calculo_salario(base, bonus=0)` que devuelva el salario total sumando base + bonus, siendo bonus un par√°metro opcional.

‚úÖ Prueba a resolverlos aplicando lo aprendido en este documento.
"""

# --------------------------------------------------
# 1Ô∏è‚É£ saludo_personalizado(nombre)
# --------------------------------------------------


# --------------------------------------------------
# 2Ô∏è‚É£ area_rectangulo(base, altura)
# --------------------------------------------------


# --------------------------------------------------
# 3Ô∏è‚É£ multiplicar_lista(*numeros)
# --------------------------------------------------


# --------------------------------------------------
# 4Ô∏è‚É£ mostrar_perfil(**datos)
# --------------------------------------------------


# --------------------------------------------------
# 5Ô∏è‚É£ calculo_salario(base, bonus=0)
# --------------------------------------------------


# ========================================
# Fin del Documento
# ========================================
