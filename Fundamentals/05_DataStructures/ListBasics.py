#!/usr/bin/env python3
# ========================================
# Introducci√≥n a Listas en Python
# ========================================

"""
## üìå Descripci√≥n
Las listas (`list`) en Python son colecciones ordenadas y mutables.
Permiten almacenar m√∫ltiples valores en una sola variable y pueden contener diferentes tipos de datos.

üìå **Caracter√≠sticas principales de las listas**:
- **Ordenadas** ‚Üí Mantienen el orden de inserci√≥n.
- **Mutables** ‚Üí Sus elementos pueden modificarse.
- **Heterog√©neas** ‚Üí Pueden contener distintos tipos de datos (enteros, cadenas, listas, etc.).
"""

# ========================================
# 1. Creaci√≥n de Listas
# ========================================

"""
Creamos varias listas usando corchetes `[]`, incluyendo una lista de n√∫meros, una de cadenas, una mixta y una vac√≠a.
"""

# Lista de n√∫meros enteros
numeros = [1, 2, 3, 4, 5]                  
# Lista de cadenas de texto
nombres = ["Ana", "Carlos", "Luis"]       
# Lista con tipos mixtos
mixta = [1, "Python", 3.14, True]         
# Lista vac√≠a
vacia = []                                

print(numeros)   # Muestra la lista de n√∫meros
print(nombres)   # Muestra la lista de nombres
print(mixta)     # Muestra la lista mixta
print(vacia)     # Muestra la lista vac√≠a

# ========================================
# 2. Acceso a Elementos
# ========================================

"""
Accedemos a elementos por su √≠ndice (positivo o negativo) y modificamos uno de ellos.
"""

print(nombres[0])   # Accede al primer elemento: "Ana"
print(nombres[-1])  # Accede al √∫ltimo elemento: "Luis"

nombres[1] = "Pedro"  # Cambia "Carlos" por "Pedro"
print(nombres)        # Muestra la lista modificada

# ========================================
# 3. M√©todos Comunes de Listas
# ========================================

"""
Usamos varios m√©todos comunes de listas para modificar su contenido.
"""

# `.append()` ‚Üí Agrega un elemento al final
nombres.append("Marta")  
print(nombres)  # Muestra la lista despu√©s de agregar "Marta"

# `.remove()` ‚Üí Elimina la primera ocurrencia de un valor
nombres.remove("Pedro")  
print(nombres)  # Muestra la lista despu√©s de eliminar "Pedro"

# `.pop()` ‚Üí Elimina y devuelve el √∫ltimo elemento (o uno espec√≠fico)
ultimo = nombres.pop()  
print(ultimo)  # Muestra el √∫ltimo elemento eliminado: 'Marta'
print(nombres)  # Muestra la lista despu√©s de eliminar el √∫ltimo elemento

# `.sort()` ‚Üí Ordena la lista (solo funciona con datos del mismo tipo)
numeros.sort()  
print(numeros)  # Muestra la lista de n√∫meros ordenada

# `.reverse()` ‚Üí Invierte el orden de la lista
numeros.reverse()  
print(numeros)  # Muestra la lista de n√∫meros invertida

# `.index()` ‚Üí Devuelve la posici√≥n de un elemento
print(nombres.index("Ana"))  # Muestra la posici√≥n de "Ana" en la lista

# ========================================
# 4. Operaciones con Listas
# ========================================

"""
Realizamos operaciones con listas: concatenaci√≥n, repetici√≥n y verificaci√≥n de existencia.
"""

# Concatenaci√≥n de listas
nueva_lista = nombres + ["Sof√≠a", "David"]  
print(nueva_lista)  # Muestra la lista nueva despu√©s de la concatenaci√≥n

# Repetici√≥n de listas
repetida = numeros * 2  
print(repetida)  # Muestra la lista de n√∫meros repetida

# Comprobaci√≥n de existencia de un elemento
print("Ana" in nombres)  # Verifica si "Ana" est√° en la lista: True
print("Carlos" in nombres)  # Verifica si "Carlos" est√° en la lista: False

# ========================================
# Resumen
# ========================================

"""
üìå **Resumen sobre Listas en Python**:
- Se crean usando `[]` y pueden contener diferentes tipos de datos.
- Se acceden mediante √≠ndices positivos y negativos.
- Se pueden modificar usando m√©todos como `.append()`, `.remove()`, `.sort()`, `.reverse()`, y `.index()`.
- Se pueden concatenar y repetir.
- Se puede verificar si un elemento existe en la lista con `in`.

‚úî Las listas son una de las estructuras m√°s usadas en Python por su flexibilidad y facilidad de manipulaci√≥n.
"""

# ========================================
"""
## üß† Ejercicios de Pr√°ctica
Pon en pr√°ctica lo aprendido sobre listas en Python.
"""
# ========================================

# --------------------------------------------------
# 1Ô∏è‚É£ Crear una lista de frutas
# --------------------------------------------------
"""
Crea una lista llamada `frutas` que contenga al menos 4 frutas.
Imprime la lista completa.
"""

# Tu c√≥digo aqu√≠...


# --------------------------------------------------
# 2Ô∏è‚É£ Acceder y modificar un elemento
# --------------------------------------------------
"""
Accede al segundo elemento de la lista `frutas` y c√°mbialo por otra fruta.
Imprime la lista resultante.
"""

# Tu c√≥digo aqu√≠...


# --------------------------------------------------
# 3Ô∏è‚É£ Agregar y eliminar elementos
# --------------------------------------------------
"""
Agrega una nueva fruta a la lista con `.append()`.
Luego elimina una fruta existente usando `.remove()`.
Imprime la lista final.
"""

# Tu c√≥digo aqu√≠...


# ‚úÖ ¬°Sigue practicando para dominar las listas!
# ========================================