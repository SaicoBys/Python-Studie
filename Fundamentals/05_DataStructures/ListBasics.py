

#!/usr/bin/env python3
# ========================================
# Introducci√≥n a Listas en Python
# ========================================

"""
## üìå Descripci√≥n
Las listas (`list`) en Python son colecciones ordenadas y mutables.
Permiten almacenar m√∫ltiples valores en una sola variable y pueden contener diferentes tipos de datos.

üìå **Caracter√≠sticas principales de las listas**:
- **Ordenadas** ‚Üí Mantienen el orden de inserci√≥n.
- **Mutables** ‚Üí Sus elementos pueden modificarse.
- **Heterog√©neas** ‚Üí Pueden contener distintos tipos de datos (enteros, cadenas, listas, etc.).
"""

# ========================================
# 1. Creaci√≥n de Listas
# ========================================

"""
Las listas se crean usando corchetes `[]` y separando los elementos con comas.
"""

# Lista de n√∫meros
numeros = [1, 2, 3, 4, 5]

# Lista de cadenas
nombres = ["Ana", "Carlos", "Luis"]

# Lista mixta
mixta = [1, "Python", 3.14, True]

# Lista vac√≠a
vacia = []

print(numeros)  # [1, 2, 3, 4, 5]
print(nombres)  # ['Ana', 'Carlos', 'Luis']
print(mixta)    # [1, 'Python', 3.14, True]
print(vacia)    # []

# ========================================
# 2. Acceso a Elementos
# ========================================

"""
Los elementos de una lista se acceden mediante √≠ndices (empezando en 0).
"""

print(nombres[0])  # Ana
print(nombres[-1])  # Luis (√≠ndice negativo)

# Modificaci√≥n de elementos
nombres[1] = "Pedro"
print(nombres)  # ['Ana', 'Pedro', 'Luis']

# ========================================
# 3. M√©todos Comunes de Listas
# ========================================

"""
Las listas tienen varios m√©todos para modificar su contenido.
"""

# `.append()` ‚Üí Agrega un elemento al final
nombres.append("Marta")
print(nombres)  # ['Ana', 'Pedro', 'Luis', 'Marta']

# `.remove()` ‚Üí Elimina la primera ocurrencia de un valor
nombres.remove("Pedro")
print(nombres)  # ['Ana', 'Luis', 'Marta']

# `.pop()` ‚Üí Elimina y devuelve el √∫ltimo elemento (o uno espec√≠fico)
ultimo = nombres.pop()
print(ultimo)  # 'Marta'
print(nombres)  # ['Ana', 'Luis']

# `.sort()` ‚Üí Ordena la lista (solo funciona con datos del mismo tipo)
numeros.sort()
print(numeros)  # [1, 2, 3, 4, 5]

# `.reverse()` ‚Üí Invierte el orden de la lista
numeros.reverse()
print(numeros)  # [5, 4, 3, 2, 1]

# `.index()` ‚Üí Devuelve la posici√≥n de un elemento
print(nombres.index("Ana"))  # 0

# ========================================
# 4. Operaciones con Listas
# ========================================

"""
Las listas permiten operaciones como concatenaci√≥n, repetici√≥n y verificaci√≥n de pertenencia.
"""

# Concatenaci√≥n de listas
nueva_lista = nombres + ["Sof√≠a", "David"]
print(nueva_lista)  # ['Ana', 'Luis', 'Sof√≠a', 'David']

# Repetici√≥n de listas
repetida = numeros * 2
print(repetida)  # [5, 4, 3, 2, 1, 5, 4, 3, 2, 1]

# Comprobaci√≥n de existencia de un elemento
print("Ana" in nombres)  # True
print("Carlos" in nombres)  # False

# ========================================
# Resumen
# ========================================

"""
üìå **Resumen sobre Listas en Python**:
- Se crean usando `[]` y pueden contener diferentes tipos de datos.
- Se acceden mediante √≠ndices positivos y negativos.
- Se pueden modificar usando m√©todos como `.append()`, `.remove()`, `.sort()`, `.reverse()`, y `.index()`.
- Se pueden concatenar y repetir.
- Se puede verificar si un elemento existe en la lista con `in`.

‚úî Las listas son una de las estructuras m√°s usadas en Python por su flexibilidad y facilidad de manipulaci√≥n.
"""

# ========================================
# Fin del Documento
# ========================================